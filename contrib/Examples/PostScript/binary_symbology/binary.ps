%!PS-Adobe-2.0
%%Creator: Terry Burton
%%DocumentPaperSizes: a4
%%EndComments
%%EndProlog

% Binary symbols adapted from Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
% (c) November 2005 - Terry Burton
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

/binary {

    0 begin

    /options exch def          
    /renderopts options def
    /barcode exch def            

    /includetext false def
    /textfont /Courier def
    /textsize 8 def
    /textpos -6 def
    /textxpos 0 def

    % Default to the spec for EMS type symbol
    /symtype (EMS) def
    /height 5 def
    /xwidth 3 def
    /ywidth 2 def
    /zwidth 1 def
    
    % Parse the input options
    options {
        token false eq {exit} if dup length string cvs (=) search
        true eq {cvlit exch pop exch def} {cvlit true def} ifelse
    } loop

    /textfont textfont cvlit def
    /textsize textsize cvr def
    /textpos textpos cvr def
    /textxpos textxpos cvr def
    % Allow custom spec if given
    /height height cvr def
    /xwidth xwidth cvr def
    /ywidth ywidth cvr def
    /zwidth zwidth cvr def
    
    % Override with BOBST spec if required
    symtype (BOBST) eq {
        /xwidth 2.4 def
        /ywidth 1.6 def
        /zwidth 0.8 def
    } if

    % Populate the human readable text
    /txt [ [barcode textxpos textpos textfont textsize] ] def
    
    % We need to convert the 32 bit unsigned input data into a binary string.
    % Since PostScript integers are 32 bit signed, and we need to make full
    % use of these 32 bits, we need to subtact 2^32 from the input to align
    % the ranges and fix this in the binary string by flipping the first
    % bit then truncating any leading zeros.
    
    % Subtract 2^32 from given barcode preventing over/underflow
    /pad (0000000000) def
    pad 10 barcode length sub barcode putinterval
    /x1 pad 0 5 getinterval cvi def
    /x2 pad 5 5 getinterval cvi def
    x1 21474 eq x2 83648 ge and x1 21474 gt or {
        /z2 x2 83648 sub def
        /carry 0 def
        z2 0 lt {
            /z2 z2 100000 add def
            /carry 1 def
        } if
        /barcode x1 21474 sub carry sub 100000 mul z2 add def
    } {
        /barcode barcode cvi 2147483647 sub 1 sub def
    } ifelse
    
    % Flip the first bit and truncate any leading zeros
    /barcode barcode 2 32 string cvrs def   
    barcode 0 1 getinterval (0) eq {
        barcode 0 (1) putinterval
    } {
        barcode 0 (0) putinterval
        barcode (1) search {
            pop pop /barcode exch def
            /pad barcode length 1 add string def
            pad 0 (1) putinterval
            pad 1 barcode putinterval
            /barcode pad def
        } {
            /barcode (0) def
        } ifelse        
    } ifelse
    
    /barlen barcode length def
    /sbs barlen 2 mul array def
    
    % Lookup the width for each bit
    0 1 barlen 1 sub {
        /i exch def
        /enc barcode i 1 getinterval def
        enc (0) eq {
            sbs i 2 mul zwidth put
        } if
        enc (1) eq {
            sbs i 2 mul xwidth put
        } if
        sbs i 2 mul 1 add ywidth put
    } for
    
    % Return the arguments
    /retval 4 dict def
    retval (sbs) sbs put
    retval (bhs) [sbs length 1 add 2 idiv {height} repeat] put
    retval (bbs) [sbs length 1 add 2 idiv {0} repeat] put
    includetext {
        retval (txt) txt put
    } if
    retval (opt) renderopts put
    retval

    end

} bind def
/binary load 0 1 dict put

/barcode {

    0 begin          % Confine variables to local scope

    /args exch def   % We are given some arguments
    /sbs args (sbs) get def
    /bhs args (bhs) get def
    /bbs args (bbs) get def
    /renderopts args (opt) get def
    
    % Get the text if known, otherwise it is empty
    args (txt) known {
        /txt args (txt) get def
    } {
        /txt [] def
    } ifelse

    % Default options
    /inkspread 0.15 def
    /height 5 def
    /width 0 def
    /showborder false def
    /borderleft 10 def
    /borderright 10 def
    /bordertop 1 def
    /borderbottom 1 def
    /borderwidth 0.5 def
    /laterallsb false def
    /lateralmsb false def
    /symtype (EMS) def
    /lsbgap 2 def
    /msbgap 2 def
    
    % Parse the render options
    renderopts {
        token false eq {exit} if dup length string cvs (=) search
        true eq {cvlit exch pop exch def} {cvlit true def} ifelse
    } loop
    
    /inkspread inkspread cvr def
    /height height cvr def
    /width width cvr def   
    /borderleft borderleft cvr def
    /borderright borderright cvr def
    /bordertop bordertop cvr def
    /borderbottom borderbottom cvr def
    /borderwidth borderwidth cvr def
    /lsbgap lsbgap cvr def
    /msbgap msbgap cvr def

    symtype (BOBST) eq {
        /lsbgap 1.6 def
        /msbgap 1.6 def
    } if
    
    % Create bar elements and put them into the bars array
    /bars sbs length 1 add 2 idiv array def
    lateralmsb {
        /x height msbgap add def
    } {
        /x 0.00 def        
    } ifelse
    0 1 sbs length 1 add 2 idiv 2 mul 2 sub {
        /i exch def
        i 2 mod 0 eq {           % i is even
            /d sbs i get def  % d=digit*r-r+1
            /h bhs i 2 idiv get def         % Height from bh
            /c d 2 div x add def            % Centre of the bar = x + d/2
            /y bbs i 2 idiv get def         % Baseline from bbs
            /w d inkspread sub def          % bar width = digit - inkspread
            bars i 2 idiv [h c y w] put     % Add the bar entry
        } {
            /d sbs i get def  % d=digit*r-r+1 
        } ifelse
        /x x d add def  % x+=d
    } for
    laterallsb {
        /x x lsbgap add height add def
    } if
    
    gsave

    % Convert scale from PostScript points to mm
    2.8346 dup scale

    % Force symbol to given width
    width 0 ne {
        width x div 1 scale
    } if

    % Display the msb diecut mark
    lateralmsb {
        newpath
        0 0 moveto
        height 0 rlineto
        0 height rlineto
        closepath
        fill
    } if
    
    % Display the bars for elements in the bars array
    bars {
        {} forall
        setlinewidth moveto 0 exch rlineto stroke
    } forall

    % Display the msb diecut mark
    laterallsb {
        newpath
        x 0 moveto
        height neg 0 rlineto
        0 height rlineto
        closepath
        fill
    } if
    
    % Display the border
    showborder {
        borderwidth setlinewidth
        borderleft neg borderbottom neg moveto
        x borderleft add borderright add 0 rlineto
        0 h borderbottom add bordertop add rlineto
        x borderleft add borderright add neg 0 rlineto
        0 h borderbottom add bordertop add neg rlineto
        closepath stroke
    } if
    
    % Display the text for elements in the text array
    /s 0 def /f () def
    txt {
        {} forall
        2 copy s ne exch f ne or {
            2 copy /s exch def /f exch def            
            exch findfont exch scalefont setfont          
        } {
            pop pop
        } ifelse
        moveto show
    } forall

    grestore
    
    end

} bind def
/barcode load 0 1 dict put

gsave
250 550 translate
(20) (includetext laterallsb) binary barcode
grestore

showpage
