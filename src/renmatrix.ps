%!PS

% Barcode Writer in Pure PostScript
% https://bwipp.terryburton.co.uk
%
% Copyright (c) 2004-2018 Terry Burton
%
% $Id$
%
% Permission is hereby granted, free of charge, to any
% person obtaining a copy of this software and associated
% documentation files (the "Software"), to deal in the
% Software without restriction, including without
% limitation the rights to use, copy, modify, merge,
% publish, distribute, sublicense, and/or sell copies of
% the Software, and to permit persons to whom the Software
% is furnished to do so, subject to the following
% conditions:
%
% The above copyright notice and this permission notice
% shall be included in all copies or substantial portions
% of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
% KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
% THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
% THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
% CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
% IN THE SOFTWARE.

% --BEGIN RENDERER renmatrix--
% --REQUIRES preamble raiseerror--
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /uk.co.terryburton.bwipp findresource put
begin
/renmatrix {

    20 dict begin

    /args exch def

    % Default options
    /width 1 def
    /height 1 def
    /barcolor (unset) def
    /backgroundcolor (unset) def
    /colormap (unset) def
    /dotty false def
    /inkspread 0 def
    /inkspreadh 0 def
    /inkspreadv 0 def
    /includetext false def
    /txt [] def
    /textcolor (unset) def
    /textxalign (unset) def
    /textyalign (unset) def
    /textfont (Courier) def
    /textsize 10 def
    /textxoffset 0 def
    /textyoffset 0 def
    /textgaps 0 def
    /alttext () def

    % Apply the renderer options and the user options
    args {def} forall
    opt {def} forall

    /width width cvr def
    /height height cvr def
    /barcolor barcolor cvlit def
    /backgroundcolor backgroundcolor cvlit def
    /inkspread inkspread cvr def
    /inkspreadh inkspreadh cvr def
    /inkspreadv inkspreadv cvr def
    /textcolor textcolor cvlit def
    /textxalign textxalign cvlit def
    /textyalign textyalign cvlit def
    /textfont textfont cvlit def
    /textsize textsize cvr def
    /textxoffset textxoffset cvr def
    /textyoffset textyoffset cvr def
    /textgaps textgaps cvr def
    /alttext alttext cvlit def

    inkspread 0 ne {/inkspreadh inkspread def} if
    inkspread 0 ne {/inkspreadv inkspread def} if

    /xyget      { pixx mul add pixs exch get                   } bind def
    /xyinvert   { pixx mul add pixs exch 2 copy get 1 xor put  } bind def
    /mxyget     { pixx mul add m exch get 2#001 and            } bind def
    /mxyset     { pixx mul add m exch 3 -1 roll put            } bind def
    /msetborder { pixx mul add m exch 2 copy get 2#010 or put  } bind def
    /mborderoff { pixx mul add m exch 2 copy get 2#100 or put  } bind def
    /misborder  { pixx mul add m exch get 2#110 and 2#010 eq   } bind def
    /mclear     { pixx mul add m exch 2 copy get 2#001 and put } bind def
    /mclear4 {
        2 copy                       mclear
        2 copy 1 add                 mclear
        2 copy exch 1 add exch       mclear
        2 copy exch 1 add exch       mclear
               1 add exch 1 add exch mclear
    } bind def

    /trace {
        % Walk the outline of a region emitting edge coordinates of the path
        /y exch def  /x exch def
        % dir 0:right 1:down 2:left 3:up
        % hug 0:right 1:left
        /dir x 1 add y 1 add mxyget def  /hug dir def
        /sx x def  /sy y def  /sdir dir def
        mark [x y] {
            x 1 add y
            x 1 add y 1 add
            x       y 1 add
            x       y
            8 dir 2 mul neg roll
            /Dy exch def  /Dx exch def  /D Dx Dy xyget def
            /Cy exch def  /Cx exch def  /C Cx Cy xyget def
            /By exch def  /Bx exch def  /B Bx By xyget def
            /Ay exch def  /Ax exch def  /A Ax Ay xyget def
            A B eq {
                A C eq {/L} {/R} ifelse
            } {
                A C eq B D eq and {
                    A 0 eq hug 0 eq xor {/R} {/F} ifelse
                } {
                    /F
                } ifelse
            } ifelse
            dup /F eq {
                pop
                dir 0 eq {/x x 1 add def} if
                dir 1 eq {/y y 1 add def} if
                dir 2 eq {/x x 1 sub def} if
                dir 3 eq {/y y 1 sub def} if
                hug 0 eq {
                    Ax Ay msetborder
                } {
                    Bx By msetborder
                } ifelse
            } {
                /L eq {
                    /dir dir 3 add 4 mod def
                    hug 1 eq {
                         Bx By msetborder
                         Dx Dy mborderoff
                    } if
                } {  % R
                    /dir dir 1 add 4 mod def
                    hug 0 eq {
                         Ax Ay msetborder
                         Cx Cy mborderoff
                    } if
                } ifelse
                [x y]
            } ifelse
            x sx eq y sy eq and dir sdir eq and {exit} if
        } loop
        counttomark array astore exch pop

        % Invert the interior of the path
        /x x 1 add def /y y 1 add def
        /t x y mxyget 1 xor def
        mark x y {
            counttomark 0 eq {exit} if
            /y exch def /x exch def
            x y mxyget t ne {
                0          x 1 sub -1 0          {dup y misborder {exch pop exit} if pop} for
                pixx 1 sub x 1 add  1 pixx 1 sub {dup y misborder {exch pop exit} if pop} for
                1 exch {  % From left to right border
                    /i exch def
                    i y misborder not {
                        t i y mxyset
                        i y xyinvert
                    } if
                    i y 1 sub mxyget t ne i y 1 sub misborder not and {i y 1 sub} if
                    i y 1 add mxyget t ne i y 1 add misborder not and {i y 1 add} if
                } for
            } if
        } loop
        pop

        % Walk the path to clear the border information
        dup 0 get aload pop /y1 exch def /x1 exch def
        dup dup length 1 sub 1 exch getinterval {
            aload pop /y2 exch def /x2 exch def
            x2 x1 gt { x1  2 x2 1 sub {y1      mclear4} for } if
            y2 y1 gt { y1  2 y2 1 sub {x1 exch mclear4} for } if
            x2 x1 lt { x1 -2 x2 1 add {y1      mclear4} for } if
            y2 y1 lt { y1 -2 y2 1 add {x1 exch mclear4} for } if
            /x1 x2 def /y1 y2 def
        } forall

        % Discard duplicate final point
        dup length 1 sub 0 exch getinterval

    } bind def

    % Set RGB or CMYK color depending on length of given hex string
    /setanycolor {
        /anycolor exch def
        anycolor length 6 eq {
            (<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
        } if
        anycolor length 8 eq {
            (<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
        } if
    } bind def

    % Plot a layer of single colour
    /drawlayer {

        /pixsorig pixs def
        /pixs exch def

        % Pad the bitmap on all sides
        /pixs [
            pixx 2 add {0} repeat
            0 pixx pixs length 1 sub {
                0 exch
                pixs exch pixx getinterval aload pop
                0
            } for
            pixx 2 add {0} repeat
        ] def
        /pixx pixx 2 add def
        /pixy pixy 2 add def

        % Track inverted regions and working space
        /m [ pixs length {0} repeat ] def

        % Construct paths by tracing and inverting each dark region
        /paths [
            0 1 pixy 1 sub {
                /j exch def
                0 1 pixx 1 sub {
                    /i exch def
                    i j xyget 1 eq {
                        i 1 sub j 1 sub trace
                    } if
                } for
            } for
        ] def

        % Revert the bitmap size
        /pixx pixx 2 sub def
        /pixy pixy 2 sub def

        % Draw the image
        newpath
        paths {
            /p exch def
            /len p length def
            p len 1 sub get aload pop
            p 0 get aload pop
            0 1 len 1 sub {                                % x1 y1 x2 y2
                /i exch def
                p i 1 add len mod get aload pop 6 -2 roll  % x3 y3 x1 y1 x2 y2
                5 index inkspreadh
                4 index 4 -1 roll lt {add} {sub} ifelse    % y3<y1 ? x2+i : x2-i
                4 1 roll
                4 index inkspreadv
                4 index 4 -1 roll gt {add} {sub} ifelse    % x3>x1 ? y2+i : y2-i
                4 -1 roll exch pixy exch sub
                i 0 eq {moveto} {lineto} ifelse
            } for                                          % x2 y2 x3 y3
            closepath
            pop pop pop pop
        } forall
        fill

        /pixs pixsorig def

    } bind def

    /drawlayerdots {

        /pixsorig pixs def
        /pixs exch def

        newpath
        0 1 pixs length 1 sub {
            dup pixx mod /x exch def
            pixx idiv /y exch def
            x y xyget 1 eq {
               x 0.5 add pixy y sub 0.5 sub moveto
               x 0.5 add pixy y sub 0.5 sub 0.5 inkspread sub 0 360 arc
            } if
        } for
        fill

        /pixs pixsorig def

    } bind def

    gsave

    % Draw the image
    /inkspread  inkspread  2 div def
    /inkspreadh inkspreadh 2 div def
    /inkspreadv inkspreadv 2 div def
    currentpoint translate
    width pixx div 72 mul height pixy div 72 mul scale
    0 0 moveto pixx 0 lineto pixx pixy lineto 0 pixy lineto closepath
    backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if

    colormap (unset) eq {
        /colormap << 1 barcolor >> def
    } if

    colormap {
        setanycolor
        /key exch def
        [
            pixs { key eq {1} {0} ifelse } forall
        ] dotty {drawlayerdots} {drawlayer} ifelse
    } forall

    % Display the text for elements in the text array
    textcolor (unset) ne { textcolor setanycolor } if
    includetext {
        textxalign (unset) eq textyalign (unset) eq and alttext () eq and {
            /s 0 def /fn () def
            txt {
                {} forall
                2 copy s ne exch fn ne or {
                    2 copy /s exch def /fn exch def
                    selectfont
                } {
                    pop pop
                } ifelse
                moveto show
            } forall
        } {
            textfont textsize selectfont
            alttext () eq {
                /txt [ txt { 0 get {} forall } forall ] def
                /tstr txt length string def
                0 1 txt length 1 sub { dup txt exch get tstr 3 1 roll put } for
            } {
                /tstr alttext def
            } ifelse

            % Find true ascent of font
            tstr length 0 eq {
                0
            } {
                gsave
                newpath 0 0 moveto (0) false charpath pathbbox
                4 1 roll pop pop pop
                grestore
                currentfont /PaintType known {currentfont /PaintType get 2 eq} {false} ifelse
                currentfont /StrokeWidth known and {
                    currentfont /StrokeWidth get 2 div 0 exch
                    currentfont /FontMatrix get dtransform
                    dup mul exch dup mul add sqrt
                    add
                } if
            } ifelse
            /textascent exch def
            /textwidth tstr stringwidth pop tstr length 1 sub textgaps mul add def

            /textxpos textxoffset x textwidth sub 2 div add def
            textxalign (left) eq { /textxpos textxoffset def } if
            textxalign (right) eq { /textxpos x textxoffset sub textwidth sub def } if
            textxalign (offleft) eq { /textxpos textwidth textxoffset add neg def } if
            textxalign (offright) eq { /textxpos x textxoffset add def } if
            textxalign (justify) eq textwidth x lt and {
                /textxpos 0 def
                /textgaps x textwidth sub tstr length 1 sub div def
            } if
            /textypos textyoffset textascent add 1 add neg def
            textyalign (above) eq { /textypos textyoffset pixy add 1 add def } if
            textyalign (center) eq { /textypos textyoffset pixy textascent sub 2 div add def } if
            textxpos textypos moveto textgaps 0 tstr ashow
        } ifelse
    } if

    grestore

    end

} bind def
/renmatrix dup load /uk.co.terryburton.bwipp defineresource pop
end
/setpacking where {pop setpacking} if
% --END RENDERER renmatrix--
